# -*- coding: utf-8 -*-
"""04-context-variables-chat.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AK7QZdlBMUL2RKdWHzIyKPb1pHxHdzw9

# Creating a basic chat experience with context variables

In this example, we show how you can build a simple chat bot by sending and updating context with your requests.

We introduce the Context Variables object which in this demo functions similarly as a key-value store that you can use when running the kernel.

The context is local (i.e. in your computer's RAM) and not persisted anywhere beyond the life of this Jupyter session.

In future examples, we will show how to persist the context on disk so that you can bring it into your applications.  

In this chat scenario, as the user talks back and forth with the bot, the context gets populated with the history of the conversation. During each new run of the kernel, the context can provide the AI with its variables' content.
"""

# !python3 -m pip install semantic-kernel==0.2.7.dev0

import semantic_kernel as sk
from semantic_kernel.connectors.ai.open_ai import AzureTextCompletion, OpenAITextCompletion

kernel = sk.Kernel()

useAzureOpenAI = False

# Configure AI service used by the kernel
if useAzureOpenAI:
    deployment, api_key, endpoint = sk.azure_openai_settings_from_dot_env()
    kernel.add_text_completion_service("dv", AzureTextCompletion(deployment, endpoint, api_key))
else:
    api_key, org_id = sk.openai_settings_from_dot_env()
    kernel.add_text_completion_service("dv", OpenAITextCompletion("text-davinci-003", api_key, org_id))

"""Let's define a prompt outlining a dialogue chat bot."""

sk_prompt = """
ChatBot can have a conversation with you about any topic.
It can give explicit instructions or say 'I don't know' if it does not have an answer.

{{$history}}
User: {{$user_input}}
ChatBot: """

"""Register your semantic function"""

chat_function = kernel.create_semantic_function(sk_prompt, "ChatBot", max_tokens=2000, temperature=0.7, top_p=0.5)

"""Initialize your context"""

context = kernel.create_new_context()
context["history"] = ""

"""Chat with the Bot"""

# context["user_input"] = "Hi, I'm looking for book suggestions"
context["User_input"] = input("Enter message please:")
bot_answer = await chat_function.invoke_async(context=context)
print(bot_answer)

"""Update the history with the output"""

context["history"] += f"\nUser: {context['user_input']}\nChatBot: {bot_answer}\n"
print(context["history"])

"""Keep Chatting!"""

async def chat(input_text: str) -> None:
    # Save new message in the context variables
    print(f"User: {input_text}")
    context["user_input"] = input_text

    # Process the user message and get an answer
    answer = await chat_function.invoke_async(context=context)

    # Show the response
    print(f"ChatBot: {answer}")

    # Append the new interaction to the chat history
    context["history"] += f"\nUser: {input_text}\nChatBot: {answer}\n"

await chat(input("Enter message:"))

for i in range(5):
  await chat(input("Enter message here, please:"))

while True:
  await chat(input("Enter messgae here, please:"))
  if input()=="quit":
    break
  print("the chat is terminated!")

await chat("I love history and philosophy, I'd like to learn something new about Greece, any suggestion?")

await chat("that sounds interesting, what what is the embedding layer of transformer architecture?is it about?")

await chat("if I read that book, what exactly will I learn about Greek history?")

await chat("could you list some more books I could read about this topic?")

"""After chatting for a while, we have built a growing history, which we are attaching to each prompt and which contains the full conversation. Let's take a look!"""

print(context["history"])
